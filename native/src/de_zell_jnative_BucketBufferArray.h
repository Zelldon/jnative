/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class de_zell_jnative_BucketBufferArray */

#ifndef _Included_de_zell_jnative_BucketBufferArray
#define _Included_de_zell_jnative_BucketBufferArray
#ifdef __cplusplus
extern "C" {
#endif
#undef de_zell_jnative_BucketBufferArray_ALLOCATION_FACTOR
#define de_zell_jnative_BucketBufferArray_ALLOCATION_FACTOR 32L
/*
 * Class:     de_zell_jnative_BucketBufferArray
 * Method:    allocate
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_de_zell_jnative_BucketBufferArray_allocate
  (JNIEnv *, jobject, jlong);

/*
 * Class:     de_zell_jnative_BucketBufferArray
 * Method:    free
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_de_zell_jnative_BucketBufferArray_free
  (JNIEnv *, jobject, jlong);

/*
 * Class:     de_zell_jnative_BucketBufferArray
 * Method:    createInstance
 * Signature: (IIIII)J
 */
JNIEXPORT jlong JNICALL Java_de_zell_jnative_BucketBufferArray_createInstance
  (JNIEnv *, jobject, jint, jint, jint, jint, jint);

/*
 * Class:     de_zell_jnative_BucketBufferArray
 * Method:    clearInternal
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_de_zell_jnative_BucketBufferArray_clearInternal
  (JNIEnv *, jobject, jlong);

/*
 * Class:     de_zell_jnative_BucketBufferArray
 * Method:    allocateNewBucketBuffer
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_de_zell_jnative_BucketBufferArray_allocateNewBucketBuffer
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     de_zell_jnative_BucketBufferArray
 * Method:    readInt
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_de_zell_jnative_BucketBufferArray_readInt
  (JNIEnv *, jobject, jlong);

/*
 * Class:     de_zell_jnative_BucketBufferArray
 * Method:    readLong
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_de_zell_jnative_BucketBufferArray_readLong
  (JNIEnv *, jobject, jlong);

/*
 * Class:     de_zell_jnative_BucketBufferArray
 * Method:    getBucketBufferCount
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_de_zell_jnative_BucketBufferArray_getBucketBufferCount
  (JNIEnv *, jobject, jlong);

/*
 * Class:     de_zell_jnative_BucketBufferArray
 * Method:    getBucketCount
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_de_zell_jnative_BucketBufferArray_getBucketCount
  (JNIEnv *, jobject, jlong);

/*
 * Class:     de_zell_jnative_BucketBufferArray
 * Method:    getBlockCount
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_de_zell_jnative_BucketBufferArray_getBlockCount
  (JNIEnv *, jobject, jlong);

/*
 * Class:     de_zell_jnative_BucketBufferArray
 * Method:    closeInternal
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_de_zell_jnative_BucketBufferArray_closeInternal
  (JNIEnv *, jobject, jlong);

/*
 * Class:     de_zell_jnative_BucketBufferArray
 * Method:    getCapacity
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_de_zell_jnative_BucketBufferArray_getCapacity
  (JNIEnv *, jobject, jlong);

/*
 * Class:     de_zell_jnative_BucketBufferArray
 * Method:    getCountOfUsedBytes
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_de_zell_jnative_BucketBufferArray_getCountOfUsedBytes
  (JNIEnv *, jobject, jlong);

/*
 * Class:     de_zell_jnative_BucketBufferArray
 * Method:    size
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_de_zell_jnative_BucketBufferArray_size
  (JNIEnv *, jobject, jlong);

/*
 * Class:     de_zell_jnative_BucketBufferArray
 * Method:    getMaxBucketBufferLength
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_de_zell_jnative_BucketBufferArray_getMaxBucketBufferLength
  (JNIEnv *, jobject, jlong);

/*
 * Class:     de_zell_jnative_BucketBufferArray
 * Method:    getLoadFactor
 * Signature: (J)F
 */
JNIEXPORT jfloat JNICALL Java_de_zell_jnative_BucketBufferArray_getLoadFactor
  (JNIEnv *, jobject, jlong);

/*
 * Class:     de_zell_jnative_BucketBufferArray
 * Method:    getMaxBucketLength
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_de_zell_jnative_BucketBufferArray_getMaxBucketLength
  (JNIEnv *, jobject, jlong);

/*
 * Class:     de_zell_jnative_BucketBufferArray
 * Method:    allocateNewBucket
 * Signature: (JII)J
 */
JNIEXPORT jlong JNICALL Java_de_zell_jnative_BucketBufferArray_allocateNewBucket
  (JNIEnv *, jobject, jlong, jint, jint);

#ifdef __cplusplus
}
#endif
#endif
